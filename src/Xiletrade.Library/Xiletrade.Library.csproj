<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <UseWindowsForms>false</UseWindowsForms>
    <UseWPF>false</UseWPF>
    <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    <Nullable>disable</Nullable>
    <Title>Xiletrade library</Title>
    <Product>Xiletrade library</Product>
    <Authors>maxensas</Authors>
    <Company>Toolcaps</Company>
    <Version>0.1.0</Version>
    <PackageVersion>0.1.0</PackageVersion>
    <Copyright>Copyright © 2024 maxensas</Copyright>
    <Description>Xiletrade class library that allows .NET developers to create their own user interface for checking item prices in Path Of Exile.</Description>
    <AssemblyTitle>Xiletrade Multiplatform .NET Library</AssemblyTitle>
    <PackageProjectUrl>https://github.com/maxensas/xiletrade</PackageProjectUrl>
    <PackageReleaseNotes>https://github.com/maxensas/xiletrade/releases</PackageReleaseNotes>
    <PackageLicenseExpression>LGPL-3.0-only</PackageLicenseExpression>
    <PackageTags>xiletrade c# .net multiplatform library</PackageTags>
    <PackageId>Xiletrade.Library</PackageId>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>2</WarningLevel>
    <OutputPath>bin\Debug\</OutputPath>
    <DocumentationFile></DocumentationFile>
    <DebugType>portable</DebugType>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DebugType>none</DebugType>
    <DebugSymbols>false</DebugSymbols>
  </PropertyGroup>
  <PropertyGroup Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))'=='true'">
    <DefineConstants>Windows</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))'=='true'">
    <DefineConstants>OSX</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))'=='true'">
    <DefineConstants>Linux</DefineConstants>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.0" />
    <PackageReference Include="Utf8Json" Version="1.3.7" />
  </ItemGroup>
  <!--
  <ItemGroup>
    <Resource Include="Img\**" />
  </ItemGroup>
  -->
  <ItemGroup>
    <Content Include="Data\**">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  
  <!-- Assuming you have installed Obfuscar.GlobalTool(https://www.nuget.org/packages/Obfuscar.GlobalTool). -->
  <!-- uncomment/comment target group if you want to obfuscate or not -->
  <!--
  <Target Name="Obfuscation" AfterTargets="AfterCompile" Condition="'$(PublishProtocol)'!=''">
    <Message Text="Obfuscating Xiletrade library..." Importance="high" />
    <Exec Command="obfuscar.console.exe obfuscar.xml" />
    <Exec Command="COPY $(ProjectDir)$(IntermediateOutputPath)Obfuscated\$(TargetFileName) $(ProjectDir)$(IntermediateOutputPath)$(TargetFileName)" />
  </Target>
  -->
</Project>
